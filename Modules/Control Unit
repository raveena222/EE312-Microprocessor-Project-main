module ControlUnitPipeline(input rst,clk,
input[7:0] instr_reg_fetch,output instr_enable,instr_RW,output[7:0] instr_address,
//ALU_datain=dataFromMemory and AluResult multiplexed
input[7:0] ALU_datain,output data_enable,data_RW,output[3:0]data_address,
//operand1_dataout=represents multiplexed signal
output [3:0]opcode,output reg [7:0] operand1_dataout,operand2);

reg [3:0]state;
reg [3:0]next_state;

reg [7:0] regA,regB,regC,regD;
reg [7:0]program_counter;
reg [7:0]instr_reg_decode;
reg [7:0]instr_reg_execute;

parameter s0=4'd0,sF=4'd1,sFD=4'd2,sFDALU=4'd3,sFDLD=4'd4,sFDST=4'd5,sHLT=4'd6,halting_instr=8'd255;

always @(posedge clk)//incrementing Program Counter
begin
if(~rst) program_counter<=8'd0;
else program_counter<=(state==sF | state==sFD | state==sFDALU | state==sFDLD | state == sFDST)?(program_counter+8'd1):(program_counter);

end



always @(posedge clk)//state changing logic
begin
if(~rst) state<=s0;
else state<=next_state;
end

always @(posedge clk)//changing instruction register to new value
begin
instr_reg_decode<=instr_reg_fetch;
instr_reg_execute<=instr_reg_decode;
end

always @(posedge clk)//registers value assignment
begin
  regA<=(((state==sFDALU)&(~(|instr_reg_execute[3:2])))|(state==sFDLD))?ALU_datain:regA;
  regB<=((state==sFDALU)&((~instr_reg_execute[3])&instr_reg_execute[2]))?ALU_datain:regB;
  regC<=((state==sFDALU)&(instr_reg_execute[3]&(~instr_reg_execute[2])))?ALU_datain:regC;
  regD<=((state==sFDALU)&((&instr_reg_execute[3:2])))?ALU_datain:regD;
end


always @*//next state value
begin 
case(state)
s0:next_state=sF;//rst?sfetch:s0;
sF:next_state=sFD;
sFD:next_state=(&instr_reg_decode)?sHLT:(((|instr_reg_decode[7:5]))?sFDALU:(instr_reg_decode[4]?sFDST:sFDLD));
// Checking for last instruction => 8'b11111111
sFDALU:next_state=(&instr_reg_decode)?sHLT:(((|instr_reg_decode[7:5]))?sFDALU:(instr_reg_decode[4]?sFDST:sFDLD));
sFDST:next_state=(&instr_reg_decode)?sHLT:(((|instr_reg_decode[7:5]))?sFDALU:(instr_reg_decode[4]?sFDST:sFDLD));
sFDLD:next_state=(&instr_reg_decode)?sHLT:(((|instr_reg_decode[7:5]))?sFDALU:(instr_reg_decode[4]?sFDST:sFDLD));
sHLT:next_state=sHLT;
default:next_state=s0;
endcase
end


always @*//operand2 value 
begin
case((&instr_reg_execute[7:6])|(instr_reg_execute[7]&instr_reg_execute[4])|((~(instr_reg_execute[7]|instr_reg_execute[6]|instr_reg_execute[4]))&instr_reg_execute[5]))
1'b1:operand2={{7{instr_reg_execute[1]}},instr_reg_execute[0]};
1'b0:
begin
case(instr_reg_execute[1:0])
2'b00:operand2=regA;
2'b01:operand2=regB;
2'b10:operand2=regC;
2'b11:operand2=regD;
endcase
end
endcase
end

always @*//operand1_dataout value
begin
operand1_dataout=regA;
end



assign instr_enable=(state==sF | state==sFD | state==sFDALU | state==sFDLD | state == sFDST)?1'b1:1'b0,//instruction memory signals
instr_RW=1'b1, 
instr_address=program_counter;


assign data_enable=((state==sFDLD)|(state==sFDST))?1'b1:1'b0,//data memory signals
data_RW=(state==sFDST)?1'b0:1'b1,
data_address=instr_reg_execute[3:0];

assign opcode=instr_reg_execute[7:4];//giving opcode out for ALU operations

endmodule
